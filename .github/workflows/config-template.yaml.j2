proxy:
    secretToken: "{{ secret_token }}"
    https:
      enabled: {{ https_enabled | default(false) }}
      hosts:
        - "{{ jh_host }}"
      letsencrypt:
        contactEmail: "{{ contact_email }}"

singleuser:
  image:
    name: "{{ image_name }}"
    tag: "{{ image_tag }}"
    pullPolicy: Always
  fsGid: 1000
  cmd: /sbin/my_my_init
  extraEnv:
    NB_USER: "aiida"
    NB_UID: "1000"
    NB_GID: "1000"
    AIIDALAB_FACTORY_RESET: "{{ aiidalab_factory_reset | default('')}}"
{%- if aiidalab_default_apps %}
    AIIDALAB_DEFAULT_APPS: >-
      {{ aiidalab_default_apps.split() | join('\n') | indent(6) }}
{%- endif %}
  storage:
    homeMountPath: "/home/aiida"
    dynamic:
      storageClass: aws-efs
  memory:
    limit: 4G
    guarantee: 2G
  cpu:
    limit: 2
    guarantee: 2
  startTimeout: 600

hub:
  config:
    Authenticator:
      admin_users:
        - csadorf
      allowed_users:
        - csadorf
        - itimrov
        - ncolonna
    JupyterHub:
      authenticator_class: firstuseauthenticator.FirstUseAuthenticator
  db:
    pvc:
      storageClassName: gp2
  extraConfig:
    myConfig: |
      c.KubeSpawner.http_timeout = 600
      # phusion init system needs to run as root
      c.KubeSpawner.uid = 0
      # Setting the gid was needed to fix
      # https://github.com/aiidalab/aiidalab-docker-stack/issues/20
      c.KubeSpawner.gid = 1000

      # insert template path for custom login template
      c.JupyterHub.template_paths.insert(0, "/etc/jupyterhub/templates")

      # Override default logo
      import urllib.request
      urllib.request.urlretrieve("https://github.com/aiidalab/ansible-role-aiidalab-server/raw/master/files/aiidalab_wide.png", "aiidalab-logo.png")
      c.JupyterHub.logo_file = "aiidalab-logo.png"

scheduling:
  userPlaceholder:
    enabled: true
    replicas: 1
  userPods:
    nodeAffinity:
      # matchNodePurpose valid options:
      # - ignore
      # - prefer (the default)
      # - require
      matchNodePurpose: require

# removing inactive pods (=no response from the user's browser).
cull:
  enabled: true
  # timeout = 2h
  timeout: 7200
  # check every 10 minutes
  every: 600
